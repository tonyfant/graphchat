extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.10", import: ["@key"])
  @link(url: "https://specs.apollo.dev/connect/v0.1", import: ["@source", "@connect"])
  @source(
    name: "weatherdata"
    http: {
      baseURL: "https://weather.visualcrossing.com/",
    }
  )
  @source(
    name: "trimblemaps"
    http: {
      baseURL: "https://singlesearch.alk.com/"
      headers: [{ name: "Authorization", value: "{$config.locationsApiKey}" }]
    }
  )

type Geo {
  lat: String!
  long: String!
  weather: Weather
}

type Weather @key(fields: "lat long", resolvable: false) {
  lat: String!
  long: String!
  temperature: Float
  windSpeed: Float
  conditions: String
  forecastSnowFall: Float
  currentSnowDepth: Float
}

type Query {
    geoByAddress(search: String!): Geo
        @connect(
            source: "trimblemaps"
            http: {
                GET: "na/api/search?query={$args.search}"
            }
            selection: """
            lat:Locations->first.Coords.Lat
            long:Locations->first.Coords.Lon
            weather: {
                lat:Locations->first.Coords.Lat
                long:Locations->first.Coords.Lon
            }
            """
        )

  getWeatherData (lat: String!, long: String!) : Weather
    @connect(
        source: "weatherdata"
        http: { 
            GET: "/VisualCrossingWebServices/rest/services/timeline/{$args.lat},{$args.long}?key={$config.conditionsApiKey}&include=current&unitGroup=us" 
        }
        selection: """
        lat:$args.lat
        long:$args.long
        $.currentConditions
        {
        forecastSnowFall: snow
        temperature: temp
        windSpeed: windspeed
        conditions
        currentSnowDepth: snowdepth
        }
        """
        entity: true
      )
}